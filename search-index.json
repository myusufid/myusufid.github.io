[{"title": "Laradock Guzzle Issue or Curl Issue Connection Refused", "description": "How to fix connection refused errors in Laradock when using Guzzle or Curl", "content": "<article class=\"blog-post\">\n    <h1>Laradock Guzzle Issue or Curl Issue Connection Refused</h1>\n    <div class=\"meta mb-4\">December 10, 2021</div>\n\n    <div class=\"content\">\n        <h2>NGINX Configuration Fix</h2>\n        <p>Add network aliases in your docker-compose configuration:</p>\n\n        <pre><code>nginx:\n    build:\n        context: ./nginx\n        args:\n            - CHANGE_SOURCE=${CHANGE_SOURCE}\n            - PHP_UPSTREAM_CONTAINER=${NGINX_PHP_UPSTREAM_CONTAINER}\n            - PHP_UPSTREAM_PORT=${NGINX_PHP_UPSTREAM_PORT}\n            - http_proxy\n            - https_proxy\n            - no_proxy\n    volumes:\n        - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}${APP_CODE_CONTAINER_FLAG}\n        - ${NGINX_HOST_LOG_PATH}:/var/log/nginx\n        - ${NGINX_SITES_PATH}:/etc/nginx/sites-available\n        - ${NGINX_SSL_PATH}:/etc/nginx/ssl\n    ports:\n        - \"${NGINX_HOST_HTTP_PORT}:80\"\n        - \"${NGINX_HOST_HTTPS_PORT}:443\"\n        - \"${VARNISH_BACKEND_PORT}:81\"\n    depends_on:\n        - php-fpm\n    networks:\n        frontend:\n            aliases:\n                - ssp-api.test\n        backend:\n            aliases:\n                - ssp-api.test</code></pre>\n\n        <h2>Key Solution</h2>\n        <p>The important part that fixes the connection issues:</p>\n        <pre><code>networks:\n    frontend:\n        aliases:\n            - ssp-api.test\n    backend:\n        aliases:\n            - ssp-api.test</code></pre>\n\n        <div class=\"tags mt-4\">\n            <span class=\"badge\">#Laradock</span>\n            <span class=\"badge\">#Docker</span>\n            <span class=\"badge\">#Nginx</span>\n            <span class=\"badge\">#Networking</span>\n        </div>\n    </div>\n</article>", "url": "posts/laradock-guzzle-issue-or-curl-issue-connection-refused.html", "tags": "laradock, docker, nginx, networking"}, {"title": "Trigger job queue tinker laravel", "description": "Learn how to manually trigger Laravel job queues using Tinker for testing and debugging purposes", "content": "<article class=\"blog-post\">\n    <h1>Cara Trigger Job Queue di Tinker Laravel</h1>\n    <div class=\"meta mb-4\">February 16, 2024</div>\n\n    <div class=\"content\">\n        <p>Berikut contoh cara trigger Job Queue di Tinker Laravel.</p>\n\n        <h2>Langkah-langkah</h2>\n        <ol>\n            <li>Pertama masuk ke tinker laravel:\n                <pre><code>php artisan tinker</code></pre>\n            </li>\n            <li>Lalu masukan command berikut:\n                <pre><code>\\Queue::push(new \\App\\Jobs\\ManualTriggerPush(\\App\\Models\\User::find(634)))</code></pre>\n            </li>\n        </ol>\n\n        <h2>Output</h2>\n        <pre><code>Psy Shell v0.10.12 (PHP 7.4.20 â€” cli) by Justin Hileman\nNew version is available (current: v0.10.12, latest: v0.11.10)\n>>> \\Queue::push(new \\App\\Jobs\\ManualTriggerPush(\\App\\Models\\User::find(634)))</code></pre>\n\n        <div class=\"tags mt-4\">\n            <span class=\"badge\">#Laravel</span>\n            <span class=\"badge\">#PHP</span>\n            <span class=\"badge\">#Queue</span>\n            <span class=\"badge\">#Tips</span>\n        </div>\n    </div>\n</article>", "url": "posts/trigger-job-queue-tinker-laravel.html", "tags": "laravel, php, queue, tips, debugging"}, {"title": "Over-Fetching or Under-fetching?", "description": "Understanding the concepts of over-fetching and under-fetching in API design", "content": "<article class=\"blog-post\">\n    <h1>Over-Fetching or Under-fetching?</h1>\n    <div class=\"meta mb-4\">November 22, 2021</div>\n\n    <div class=\"content\">\n        <h2>Over-fetching</h2>\n        <p>Over-fetching occurs when you retrieve more data than needed in an API response. This means you're getting data fields that won't be used in your application.</p>\n\n        <h2>Under-fetching</h2>\n        <p>Under-fetching happens when a single API endpoint doesn't provide enough data, requiring additional API calls to get all needed information.</p>\n\n        <p>Reference:</p>\n        <ul>\n            <li><a href=\"https://stackoverflow.com/questions/44564905/what-is-over-fetching-or-under-fetching\">Stack Overflow - What is Over-fetching or Under-fetching?</a></li>\n        </ul>\n\n        <div class=\"tags mt-4\">\n            <span class=\"badge\">#API</span>\n            <span class=\"badge\">#Performance</span>\n            <span class=\"badge\">#GraphQL</span>\n            <span class=\"badge\">#REST</span>\n        </div>\n    </div>\n</article>", "url": "posts/over-fetching-or-under-fetching?.html", "tags": "api, performance, graphql, rest"}, {"title": "Backend Development Curriculum", "description": "Comprehensive guide to backend development topics including Golang, databases, APIs, DevOps and security", "content": "<article class=\"blog-post\">\n    <h1>Backend Development Curriculum</h1>\n    <div class=\"meta mb-4\">November 18, 2021</div>\n\n    <div class=\"content\">\n        <h2>Programming Fundamentals</h2>\n        <ul>\n            <li>Golang Basics\n                <ul>\n                    <li>Interface</li>\n                    <li>Pointer</li>\n                    <li>Unit Testing</li>\n                    <li>Callback</li>\n                </ul>\n            </li>\n        </ul>\n\n        <h2>Concurrency</h2>\n        <ul>\n            <li>Threads</li>\n            <li>Goroutine</li>\n            <li>Channel</li>\n            <li>Mutex</li>\n            <li>Race Condition</li>\n            <li>Deadlock</li>\n            <li>Delayed Job</li>\n        </ul>\n\n        <h2>Data Structures</h2>\n        <ul>\n            <li>Hashmap</li>\n            <li>Set</li>\n            <li>Priority Queue</li>\n            <li>Adjacent List</li>\n            <li>Tree</li>\n        </ul>\n\n        <h2>Design Patterns</h2>\n        <ul>\n            <li>Builder</li>\n            <li>Dependency Injection</li>\n            <li>Template Pattern</li>\n            <li>Middleware</li>\n            <li>Adapter</li>\n            <li>Prototype</li>\n            <li>Proxy</li>\n            <li>Composite</li>\n            <li>Command</li>\n            <li>Observer</li>\n        </ul>\n\n        <h2>Database</h2>\n        <ul>\n            <li>BTree</li>\n            <li>Indexing</li>\n            <li>CAP Theorem</li>\n            <li>DB Transaction</li>\n            <li>Table Normalization</li>\n            <li>Technologies:\n                <ul>\n                    <li>MySQL</li>\n                    <li>Redis</li>\n                    <li>Big Query</li>\n                </ul>\n            </li>\n        </ul>\n\n        <h2>API Development</h2>\n        <ul>\n            <li>REST API</li>\n            <li>gRPC</li>\n            <li>Tools:\n                <ul>\n                    <li>Postman</li>\n                    <li>BloomRPC</li>\n                </ul>\n            </li>\n        </ul>\n\n        <h2>Scaling & Container</h2>\n        <ul>\n            <li>Vertical vs Horizontal Scaling</li>\n            <li>Microservice</li>\n            <li>Docker</li>\n            <li>Kubernetes\n                <ul>\n                    <li>Docker Compose</li>\n                    <li>Pod</li>\n                    <li>Deployment</li>\n                    <li>Service</li>\n                    <li>Load Balancer</li>\n                </ul>\n            </li>\n        </ul>\n\n        <h2>Deployment</h2>\n        <ul>\n            <li>PaaS (Heroku)</li>\n            <li>IaaS (Google Cloud Platform)</li>\n        </ul>\n\n        <h2>DevOps</h2>\n        <ul>\n            <li>Observability: Istio</li>\n            <li>Logging: Kibana</li>\n            <li>Monitoring: Grafana</li>\n        </ul>\n\n        <h2>Security</h2>\n        <ul>\n            <li>Authentication</li>\n            <li>Authorization</li>\n            <li>CSRF</li>\n            <li>XSS</li>\n            <li>Validation</li>\n            <li>Encryption</li>\n            <li>Password Security</li>\n            <li>Race Condition</li>\n            <li>Linux Basic Security</li>\n            <li>Docker Container Security</li>\n        </ul>\n\n        <div class=\"tags mt-4\">\n            <span class=\"badge\">#Backend</span>\n            <span class=\"badge\">#Golang</span>\n            <span class=\"badge\">#DevOps</span>\n            <span class=\"badge\">#Security</span>\n        </div>\n    </div>\n</article>", "url": "posts/backend-development-curriculum.html", "tags": "backend, golang, devops, security"}, {"title": "Cara jadi DevOps", "description": "Essential skills and requirements to become a DevOps Engineer", "content": "<article class=\"blog-post\">\n    <h1>Cara jadi DevOps</h1>\n    <div class=\"meta mb-4\">December 4, 2021</div>\n\n    <div class=\"content\">\n        <h2>Pengertian</h2>\n        <ul>\n            <li>Development adalah tim yang membuat aplikasi.</li>\n            <li>Operations adalah tim yang tugasnya mendeploy aplikasi dan menjaga server</li>\n        </ul>\n\n        <h2>Syarat dan Skill</h2>\n        <h3>Linux & Server</h3>\n        <ul>\n            <li>Faham dasar dasar linux</li>\n            <li>Mahir menggunakan CLI</li>\n            <li>Bisa menggunakan perintah Shell</li>\n            <li>Mengerti dasar file system linux</li>\n            <li>Bisa mengelola server</li>\n            <li>Bisa mengakses server melalui SSH</li>\n        </ul>\n\n        <h3>Networking & Security</h3>\n        <ul>\n            <li>Dasar-dasar networking dan security</li>\n            <li>Firewall</li>\n            <li>Load Balancer</li>\n            <li>HTTP/HTTPS</li>\n            <li>DNS</li>\n        </ul>\n\n        <h3>Modern DevOps Tools</h3>\n        <ul>\n            <li>Container (Docker)</li>\n            <li>Continuous Integration/Continuous Deployment (CI/CD)</li>\n        </ul>\n\n        <h2>Related Roles</h2>\n        <ul>\n            <li>Network Engineer</li>\n            <li>Security Engineer</li>\n            <li>Sysadmin</li>\n        </ul>\n\n        <div class=\"tags mt-4\">\n            <span class=\"badge\">#DevOps</span>\n            <span class=\"badge\">#Linux</span>\n            <span class=\"badge\">#Networking</span>\n            <span class=\"badge\">#Security</span>\n        </div>\n    </div>\n</article>", "url": "posts/cara-jadi-devops.html", "tags": "devops, linux, networking, security"}, {"title": "Run MySQL Docker M1 Intel", "description": "Guide to run MySQL container on Docker for both M1 and Intel processors", "content": "<article class=\"blog-post\">\n    <h1>Run MySQL Docker on M1 & Intel</h1>\n    <div class=\"meta mb-4\">December 19, 2021</div>\n\n    <div class=\"content\">\n        <h2>Run on Terminal</h2>\n\n        <h3>For M1 Mac</h3>\n        <pre><code>docker run -d -p 3306:3306 --name mysql_container --platform linux/x86_64 --env MYSQL_ROOT_PASSWORD=12345 mysql</code></pre>\n\n        <h3>For Intel Mac</h3>\n        <pre><code>docker run -d -p 3306:3306 --name mysql_container --env MYSQL_ROOT_PASSWORD=12345 mysql</code></pre>\n\n        <img src=\"../../assets/images/Screen-Shot-2021-12-19-at-02.10.06.png\" alt=\"Docker MySQL Running\" class=\"img-fluid mb-4\">\n\n        <h2>Connect Using TablePlus</h2>\n        <p>Configuration settings:</p>\n        <ul>\n            <li>Host: 127.0.0.1</li>\n            <li>User: root</li>\n            <li>Password: 12345</li>\n            <li>Port: 3306</li>\n        </ul>\n\n        <img src=\"../../assets/images/Screen-Shot-2021-12-06-at-03.02.46.png\" alt=\"TablePlus Configuration\" class=\"img-fluid\">\n\n        <div class=\"tags mt-4\">\n            <span class=\"badge\">#Docker</span>\n            <span class=\"badge\">#MySQL</span>\n            <span class=\"badge\">#M1</span>\n            <span class=\"badge\">#TablePlus</span>\n        </div>\n    </div>\n</article>", "url": "posts/run-mysql-docker-m1-intel.html", "tags": "docker, mysql, m1, tableplus"}, {"title": "Bulk Resize Images on Terminal Mac", "description": "Quick guide to batch resize images using ImageMagick on MacOS terminal", "content": "<article class=\"blog-post\">\n    <h1>Bulk Resize Images on Terminal Mac</h1>\n    <div class=\"meta mb-4\">November 17, 2021</div>\n\n    <div class=\"content\">\n        <p>Install ImageMagick using Homebrew:</p>\n\n        <pre><code>brew install imagemagick</code></pre>\n\n        <p>Resize all images in current directory to 30% of original size:</p>\n\n        <pre><code>magick mogrify -resize 30% *</code></pre>\n\n        <p>Reference:</p>\n        <ul>\n            <li><a href=\"https://stackoverflow.com/a/60066250/5873994\">Stack Overflow - Bulk resize images using ImageMagick</a></li>\n        </ul>\n\n        <div class=\"tags mt-4\">\n            <span class=\"badge\">#Mac</span>\n            <span class=\"badge\">#Terminal</span>\n            <span class=\"badge\">#ImageMagick</span>\n            <span class=\"badge\">#Images</span>\n        </div>\n    </div>\n</article>", "url": "posts/bulk-resize-images-on-terminal-mac.html", "tags": "mac, terminal, imagemagick, images"}, {"title": "Docker Commands Cheat Sheet", "description": "Essential Docker commands for local development and container management", "content": "<article class=\"blog-post\">\n    <h1>Docker Commands yang Paling Sering Digunakan</h1>\n    <div class=\"meta mb-4\">February 16, 2024</div>\n\n    <div class=\"content\">\n        <p>Berikut adalah beberapa cheat sheet command Docker yang berguna saat sedang melakukan development atau bekerja di lingkungan local:</p>\n\n        <h2>Container Management</h2>\n        <p>Menghentikan semua container yang sedang berjalan:</p>\n        <pre><code>docker container stop $(docker container ls -a -q)</code></pre>\n\n        <p>Menghapus semua container:</p>\n        <pre><code>docker container rm $(docker container ls -a -q)</code></pre>\n\n        <p>Memulai container dan detach:</p>\n        <pre><code>docker-compose up -d</code></pre>\n\n        <p>Melihat log container:</p>\n        <pre><code>docker logs container_name</code></pre>\n\n        <h2>Volume & Image Cleanup</h2>\n        <p>Menghapus semua volume:</p>\n        <pre><code>docker volume rm $(docker volume ls -q)</code></pre>\n\n        <p>Menghapus semua image:</p>\n        <pre><code>docker rmi -f $(docker images -aq)</code></pre>\n\n        <p>Menghapus semua container, volume, dan network yang tidak digunakan:</p>\n        <pre><code>docker system prune -a --volumes</code></pre>\n\n        <h2>Container Access</h2>\n        <p>Masuk ke bash container:</p>\n        <pre><code>docker-compose exec workspace bash</code></pre>\n\n        <p>Melihat IP Container:</p>\n        <pre><code>docker container ls\ndocker inspect {container_id} | grep \"IP Address\"</code></pre>\n\n        <div class=\"tags mt-4\">\n            <span class=\"badge\">#Docker</span>\n            <span class=\"badge\">#DevOps</span>\n            <span class=\"badge\">#Containers</span>\n            <span class=\"badge\">#Tips</span>\n        </div>\n    </div>\n</article>", "url": "posts/docker-commands-cheat-sheet.html", "tags": "docker, devops, containers, tips"}, {"title": "Running Gitlab on Local with Gitlab Runner", "description": "Guide to setup and run Gitlab Runner locally with Docker integration", "content": "<article class=\"blog-post\">\n    <h1>Running Gitlab on Local with Gitlab Runner</h1>\n    <div class=\"meta mb-4\">November 22, 2021</div>\n\n    <div class=\"content\">\n        <h2>Install GitLab Runner</h2>\n        <p>Install using Homebrew:</p>\n        <pre><code>brew install gitlab-runner</code></pre>\n\n        <p>Start GitLab Runner service:</p>\n        <pre><code>brew services start gitlab-runner</code></pre>\n\n        <h2>Configure Docker Registry Access</h2>\n        <p>Add credentials to <code>/Users/muhyusuf/.docker/config.json</code> for private registry access:</p>\n\n        <pre><code>{\n    \"auths\": {\n        \"registry.gitlab.com\": {\n            \"username\": \"iambbb\",\n            \"password\": \"password\"\n        }\n    },\n    \"credsStore\": \"desktop\",\n    \"experimental\": \"disabled\", \n    \"stackOrchestrator\": \"swarm\",\n    \"currentContext\": \"default\"\n}</code></pre>\n\n        <h2>Run Specific Pipeline Stage</h2>\n        <p>Execute specific stage (e.g., unit_test):</p>\n        <pre><code>sudo gitlab-runner exec docker unit_test</code></pre>\n\n        <p>Reference:</p>\n        <ul>\n            <li><a href=\"https://docs.gitlab.com/runner/install/osx.html#homebrew-installation-alternative\">GitLab Runner Installation Guide</a></li>\n        </ul>\n\n        <div class=\"tags mt-4\">\n            <span class=\"badge\">#GitLab</span>\n            <span class=\"badge\">#Docker</span>\n            <span class=\"badge\">#CI-CD</span>\n            <span class=\"badge\">#Runner</span>\n        </div>\n    </div>\n</article>", "url": "posts/running-gitlab-on-local-with-gitlab-runner.html", "tags": "gitlab, docker, ci-cd, runner"}, {"title": "IP 0-0-0-0", "description": "Understanding the wildcard IP address 0.0.0.0 and its uses", "content": "<article class=\"blog-post\">\n    <h1>IP 0.0.0.0</h1>\n    <div class=\"meta mb-4\">December 11, 2021</div>\n\n    <div class=\"content\">\n        <p>The 0.0.0.0 IP address is sometimes called a wildcard address, unspecified address, or INADDR_ANY.</p>\n\n        <h2>What is IP 0.0.0.0?</h2>\n        <p>When used in server configurations, 0.0.0.0 means:</p>\n        <ul>\n            <li>Listen on all available network interfaces</li>\n            <li>Accept connections from any available network interface</li>\n            <li>Bind to all IPv4 addresses on the local machine</li>\n        </ul>\n\n        <h2>Common Use Cases</h2>\n        <p>You'll often see 0.0.0.0 used in:</p>\n        <ul>\n            <li>Development server configurations</li>\n            <li>Docker container networking</li>\n            <li>Application server bindings</li>\n            <li>Network service configurations</li>\n        </ul>\n\n        <h2>Example Usage</h2>\n        <pre><code lang=\"bash\"># Node.js server\napp.listen(3000, '0.0.0.0');\n\n# Python Flask\napp.run(host='0.0.0.0', port=5000)\n\n# Docker container\nEXPOSE 8080\nCMD [\"server\", \"--host\", \"0.0.0.0\"]</code></pre>\n\n        <h2>Security Considerations</h2>\n        <p>When using 0.0.0.0:</p>\n        <ul>\n            <li>Only use in development environments</li>\n            <li>Configure proper firewalls in production</li>\n            <li>Use specific IP bindings for production deployments</li>\n        </ul>\n\n        <div class=\"tags mt-4\">\n            <span class=\"badge\">#Networking</span>\n            <span class=\"badge\">#IP</span>\n            <span class=\"badge\">#Server</span>\n            <span class=\"badge\">#Tips</span>\n        </div>\n    </div>\n</article>", "url": "posts/ip-0-0-0-0.html", "tags": "networking, ip, server, tips"}, {"title": "Install Envoy Laravel", "description": "Step by step guide to install Laravel Envoy globally on Ubuntu and MacBook", "content": "<article class=\"blog-post\">\n    <h1>Install Envoy Laravel Ubuntu/Macbook</h1>\n    <div class=\"meta mb-4\">November 14, 2021</div>\n\n    <div class=\"content\">\n        <p>Install Laravel Envoy globally using Composer:</p>\n\n        <pre><code>composer global require laravel/envoy</code></pre>\n\n        <p>Add Composer path variable to $PATH by adding this line to your ~/.zshrc:</p>\n\n        <pre><code>export PATH=\"$HOME/.composer/vendor/bin:$PATH\"</code></pre>\n\n        <p>Reference:</p>\n        <ul>\n            <li><a href=\"https://stackoverflow.com/questions/36669362/problems-in-installing-laravel-envoy-with-composer\">Stack Overflow - Problems in installing Laravel Envoy with Composer</a></li>\n        </ul>\n\n        <div class=\"tags mt-4\">\n            <span class=\"badge\">#Laravel</span>\n            <span class=\"badge\">#Envoy</span>\n            <span class=\"badge\">#Ubuntu</span>\n            <span class=\"badge\">#MacBook</span>\n        </div>\n    </div>\n</article>", "url": "posts/install-envoy-laravel.html", "tags": "laravel, envoy, ubuntu, macbook"}, {"title": "No Reason to Write OpenAPI By Hand", "description": "Exploring modern tools and approaches for API design with focus on Stoplight Studio", "content": "<article class=\"blog-post\">\n    <h1>There's No Reason to Write OpenAPI By Hand</h1>\n    <div class=\"meta mb-4\">January 20, 2024</div>\n\n    <div class=\"content\">\n        <p>Creating OpenAPI specifications manually can be tedious and error-prone. Let's explore better approaches for API design, with special focus on modern tools like Stoplight Studio.</p>\n\n        <h2>Common API Design Approaches</h2>\n        \n        <h3>1. Manual YAML/JSON Writing</h3>\n        <p>Traditional approach of writing OpenAPI specs by hand:</p>\n        \n        <pre><code lang=\"yaml\">openapi: 3.0.0\npaths:\n  /pets:\n    get:\n      summary: List all pets\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Pet'</code></pre>\n\n        <h3>2. Modern GUI Editors</h3>\n        <p>Tools like Stoplight Studio provide visual editing capabilities with several advantages:</p>\n        <ul>\n            <li>Visual form-based editing</li>\n            <li>Real-time validation</li>\n            <li>Built-in mocking</li>\n            <li>Version control integration</li>\n            <li>Team collaboration features</li>\n        </ul>\n\n        <h2>Why Stoplight Studio?</h2>\n        <p>Stoplight Studio offers several key benefits:</p>\n        <ul>\n            <li>Design Libraries for model reuse</li>\n            <li>Built-in style guide enforcement</li>\n            <li>Git-based workflow</li>\n            <li>Instant preview and documentation</li>\n            <li>HTTP client for testing</li>\n        </ul>\n\n        <h2>Best Practices</h2>\n        <p>When designing APIs, consider these approaches:</p>\n        <ul>\n            <li>Use visual editors for faster design iteration</li>\n            <li>Maintain a single source of truth</li>\n            <li>Implement automated validation</li>\n            <li>Leverage version control for API specs</li>\n            <li>Use built-in mocking for early testing</li>\n        </ul>\n\n        <h2>Conclusion</h2>\n        <p>Modern tools like Stoplight Studio have made manual OpenAPI specification writing obsolete. They provide a more efficient, collaborative, and error-free approach to API design.</p>\n\n        <h2>References</h2>\n        <ul>\n            <li><a href=\"https://stoplight.io/studio\" target=\"_blank\">Stoplight Studio Official Website</a></li>\n            <li><a href=\"https://openapi.tools\" target=\"_blank\">OpenAPI Tools Directory</a></li>\n            <li><a href=\"https://swagger.io/specification/\" target=\"_blank\">OpenAPI Specification</a></li>\n        </ul>\n\n        <div class=\"tags mt-4\">\n            <span class=\"badge\">#API</span>\n            <span class=\"badge\">#OpenAPI</span>\n            <span class=\"badge\">#Stoplight</span>\n            <span class=\"badge\">#Tools</span>\n            <span class=\"badge\">#Design</span>\n        </div>\n    </div>\n</article>", "url": "posts/no-reason-to-write-openapi-by-hand.html", "tags": "api, openapi, stoplight, tools, design"}, {"title": "What is Websocket", "description": "Understanding WebSocket technology and its real-time applications", "content": "<article class=\"blog-post\">\n    <h1>What is Websocket?</h1>\n    <div class=\"meta mb-4\">November 27, 2021</div>\n\n    <div class=\"content\">\n        <p>WebSocket is an upgraded version of traditional HTTP that enables real-time, bidirectional communication between client and server.</p>\n\n        <h2>Common Use Cases</h2>\n        <ul>\n            <li>Chat applications</li>\n            <li>Location based apps</li>\n            <li>Social feeds</li>\n            <li>Collaborative work</li>\n            <li>Multi player gaming</li>\n            <li>Live streaming</li>\n            <li>Financial and sports updates</li>\n        </ul>\n\n        <div class=\"tags mt-4\">\n            <span class=\"badge\">#WebSocket</span>\n            <span class=\"badge\">#Realtime</span>\n            <span class=\"badge\">#Networking</span>\n            <span class=\"badge\">#HTTP</span>\n        </div>\n    </div>\n</article>", "url": "posts/what-is-websocket.html", "tags": "websocket, realtime, networking, http"}, {"title": "Development Process of Product", "description": "Understanding product development workflow and engineering team scaling through documentation", "content": "<article class=\"blog-post\">\n    <h1>Development Process of Product</h1>\n    <div class=\"meta mb-4\">December 19, 2021</div>\n\n    <div class=\"content\">\n        <img src=\"../../assets/images/FGKWChQXoAE6fkQ.jpeg\" alt=\"Product Development Workflow\" class=\"img-fluid mb-4\">\n\n        <h2>References</h2>\n        <ul>\n            <li><a href=\"https://twitter.com/GergelyOrosz/status/1468901848774066181\">Gergely Orosz's Twitter Thread</a></li>\n            <li><a href=\"https://blog.pragmaticengineer.com/scaling-engineering-teams-via-writing-things-down-rfcs/\">Scaling Engineering Teams via Writing Things Down - RFCs</a></li>\n        </ul>\n\n        <div class=\"tags mt-4\">\n            <span class=\"badge\">#Development</span>\n            <span class=\"badge\">#Product</span>\n            <span class=\"badge\">#Engineering</span>\n            <span class=\"badge\">#Documentation</span>\n        </div>\n    </div>\n</article>", "url": "posts/development-process-of-product.html", "tags": "development, product, engineering, documentation"}, {"title": "Cheat Sheet YII2 Framework", "description": "Quick reference guide for common YII2 Framework commands and configurations", "content": "<article class=\"blog-post\">\n    <h1>Cheat Sheet YII2 Framework</h1>\n    <div class=\"meta mb-4\">November 17, 2021</div>\n\n    <div class=\"content\">\n        <h2>Meta Tags</h2>\n        <pre><code>$this->title = 'Hello View - Demo Meta Tags'; \n$this->registerMetaTag(['name' => 'keywords', 'content' => 'yii, framework, php']); \n$this->registerMetaTag(['name' => 'description', 'content' => 'Belajar yii framework. Dipersembahkan oleh Codepolitan.');</code></pre>\n\n        <h2>Load View</h2>\n        <pre><code>return $this->render('greeting', ['name'=>$name]);</code></pre>\n\n        <h2>Pretty URL Configuration</h2>\n        <pre><code>'urlManager' => [\n    'enablePrettyUrl' => true,\n    'showScriptName' => true,\n    'enableStrictParsing' => false,\n    'rules' => [\n    ],\n]</code></pre>\n\n        <h2>Controller Mapping</h2>\n        <pre><code>'controllerMap' => [\n    'demo' => 'app\\controllers\\HelloController'\n],</code></pre>\n\n        <h2>Redirect</h2>\n        <pre><code>return $this->redirect('/url');</code></pre>\n\n        <h2>Enable Apache Rewrite</h2>\n        <pre><code>a2enmod rewrite</code></pre>\n\n        <h2>Install CKEditor</h2>\n        <pre><code>composer require 2amigos/yii2-ckeditor-widget</code></pre>\n\n        <p>References:</p>\n        <ul>\n            <li><a href=\"https://askubuntu.com/questions/48362/how-to-enable-mod-rewrite-in-apache\">How to enable mod_rewrite in Apache</a></li>\n            <li><a href=\"http://www.yiiframework.com/extension/yii2-ckeditor-widget/#hh0\">Yii2 CKEditor Widget</a></li>\n            <li><a href=\"https://stackoverflow.com/questions/30979305/how-to-create-ckeditor-in-yii2\">How to create CKEditor in Yii2</a></li>\n        </ul>\n\n        <div class=\"tags mt-4\">\n            <span class=\"badge\">#Yii2</span>\n            <span class=\"badge\">#PHP</span>\n            <span class=\"badge\">#Framework</span>\n            <span class=\"badge\">#CheatSheet</span>\n        </div>\n    </div>\n</article>", "url": "posts/cheat-sheet-yii2-framework.html", "tags": "yii2, php, framework, cheatsheet"}, {"title": "Distributed Monolith vs True Microservices", "description": "Understanding the difference between distributed monolith and true microservices architecture", "content": "<article class=\"blog-post\">\n    <h1>Distributed Monolith vs True Microservices</h1>\n    <div class=\"meta mb-4\">December 19, 2021</div>\n\n    <div class=\"content\">\n        <blockquote class=\"mb-4\">\n            <p>\"If you switch one of the microservices off and anything else breaks, you don't really have a microservice architecture, you just have a distributed monolith!\"</p>\n            <footer>- Scott Wlaschin, <cite>Domain Modelling Made Functional</cite></footer>\n        </blockquote>\n\n        <img src=\"../../assets/images/FGL_QZqXEAcJSSr.jpeg\" alt=\"Quote about distributed monolith vs microservices\" class=\"img-fluid\">\n\n        <div class=\"tags mt-4\">\n            <span class=\"badge\">#Microservices</span>\n            <span class=\"badge\">#Architecture</span>\n            <span class=\"badge\">#DistributedSystems</span>\n            <span class=\"badge\">#DDD</span>\n        </div>\n    </div>\n</article>", "url": "posts/distributed-monolith-vs-true-microservices.html", "tags": "microservices, architecture, distributed-systems, domain-driven-design"}, {"title": "Belajar Vagrant", "description": "Getting started with Vagrant for virtual development environments", "content": "<article class=\"blog-post\">\n    <h1>Belajar Vagrant</h1>\n    <div class=\"meta mb-4\">December 3, 2021</div>\n\n    <div class=\"content\">\n        <h2>Installation</h2>\n        <pre><code>brew install vagrant</code></pre>\n\n        <h2>About Boxes</h2>\n        <p>Box adalah package format yang dipake untuk environtment si vagrant / base image</p>\n\n        <h2>Basic Commands</h2>\n        <pre><code>vagrant init ubuntu/focal64\nvagrant status\nvagrant destroy</code></pre>\n\n        <div class=\"tags mt-4\">\n            <span class=\"badge\">#Vagrant</span>\n            <span class=\"badge\">#Virtualization</span>\n            <span class=\"badge\">#DevOps</span>\n            <span class=\"badge\">#Ubuntu</span>\n        </div>\n    </div>\n</article>", "url": "posts/belajar-vagrant.html", "tags": "vagrant, virtualization, devops, ubuntu"}, {"title": "Import Database MYSQL Laradock", "description": "Learn how to import MySQL databases in Laradock environment using Docker commands", "content": "<article class=\"blog-post\">\n    <h1>Import Database MYSQL di Laradock</h1>\n    <div class=\"meta mb-4\">October 28, 2021</div>\n\n    <div class=\"content\">\n        <p>Command untuk import database MySQL di environment Laradock:</p>\n\n        <pre><code>docker-compose exec -T mysql mysql -uroot -proot databasename < ~/Downloads/databasefile.sql</code></pre>\n\n        <div class=\"tags mt-4\">\n            <span class=\"badge\">#MySQL</span>\n            <span class=\"badge\">#Docker</span>\n            <span class=\"badge\">#Laradock</span>\n            <span class=\"badge\">#Database</span>\n        </div>\n    </div>\n</article>", "url": "posts/import-database-mysql-laradock.html", "tags": "mysql, docker, laradock, database"}, {"title": "Laradock mkcert Setup", "description": "Guide to setup SSL certificates with mkcert in Laradock environment", "content": "<article class=\"blog-post\">\n    <h1>Laradock + mkcert Setup</h1>\n    <div class=\"meta mb-4\">November 17, 2021</div>\n\n    <div class=\"content\">\n        <p>Generate SSL certificate in laradock/certbot/letsencrypt folder:</p>\n\n        <pre><code>sudo mkcert -install\nsudo mkcert dev.jepara.com</code></pre>\n\n        <p>Update docker-compose.yml nginx configuration:</p>\n\n        <pre><code>nginx:\n  build:\n    context: ./nginx\n    args:\n      - PHP_UPSTREAM_CONTAINER=${NGINX_PHP_UPSTREAM_CONTAINER}\n      - PHP_UPSTREAM_PORT=${NGINX_PHP_UPSTREAM_PORT}\n      - CHANGE_SOURCE=${CHANGE_SOURCE}\n      - http_proxy\n      - https_proxy\n      - no_proxy\n  volumes:\n    - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}${APP_CODE_CONTAINER_FLAG}\n    - ${NGINX_HOST_LOG_PATH}:/var/log/nginx\n    - ${NGINX_SITES_PATH}:/etc/nginx/sites-available\n    - ${NGINX_SSL_PATH}:/etc/nginx/ssl\n    - ./data/certbot/certs/:/var/certs\n    - ./certbot/letsencrypt/:/var/www/letsencrypt</code></pre>\n\n        <p>Add SSL configuration to jepara.conf in nginx/sites:</p>\n\n        <pre><code># For https\nlisten 443 ssl;\n#listen [::]:443 ssl ipv6only=on;\nssl_certificate /var/www/letsencrypt/dev.jepara.com.pem;\nssl_certificate_key /var/www/letsencrypt/dev.jepara.com-key.pem;</code></pre>\n\n        <p>Rebuild and restart nginx container:</p>\n\n        <pre><code>docker-compose build nginx\ndocker-compose restart nginx</code></pre>\n\n        <div class=\"tags mt-4\">\n            <span class=\"badge\">#Laradock</span>\n            <span class=\"badge\">#Docker</span>\n            <span class=\"badge\">#SSL</span>\n            <span class=\"badge\">#mkcert</span>\n        </div>\n    </div>\n</article>", "url": "posts/laradock-mkcert-setup.html", "tags": "laradock, docker, ssl, mkcert"}, {"title": "How to Fix 504 Gateway Timeout using Nginx", "description": "Guide to resolve 504 Gateway Timeout errors in Nginx with FastCGI and Proxy configurations", "content": "<article class=\"blog-post\">\n    <h1>How to Fix 504 Gateway Timeout using Nginx</h1>\n    <div class=\"meta mb-4\">December 19, 2021</div>\n\n    <div class=\"content\">\n        <h2>Common Error Messages</h2>\n        <ul>\n            <li>\"504 Gateway Timeout\"</li>\n            <li>\"504 Gateway Time-Out\"</li>\n            <li>\"504 Gateway Timeout NGINX\"</li>\n            <li>\"Nginx 504 Gateway Timeout\"</li>\n            <li>\"HTTP 504 Gateway Timeout\"</li>\n            <li>\"HTTP 504 Error\"</li>\n            <li>\"HTTP 504\"</li>\n            <li>\"Gateway Timeout (504)\"</li>\n        </ul>\n\n        <h2>Fix for Nginx + FastCGI (php-fpm)</h2>\n        \n        <h3>1. Update PHP Configuration</h3>\n        <p>Modify php.ini file (/etc/php.ini):</p>\n        <pre><code>max_execution_time = 300</code></pre>\n\n        <h3>2. Update PHP-FPM Configuration</h3>\n        <p>Edit /etc/php-fpm.d/www.conf:</p>\n        <pre><code>request_terminate_timeout = 300</code></pre>\n\n        <h3>3. Update Nginx Virtual Host</h3>\n        <pre><code>location ~ .php$ {\n    root /var/www/sites/nginxtips.com;\n    try_files $uri =404;\n    fastcgi_pass unix:/tmp/php5-fpm.sock;\n    fastcgi_index index.php;\n    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n    include fastcgi_params;\n    fastcgi_read_timeout 300;\n}</code></pre>\n\n        <h2>Fix for Nginx as Proxy</h2>\n        <p>Add to nginx.conf:</p>\n        <pre><code>proxy_connect_timeout       600;\nproxy_send_timeout          600;\nproxy_read_timeout          600;\nsend_timeout                600;</code></pre>\n\n        <h3>Reload Configuration</h3>\n        <pre><code>service nginx reload</code></pre>\n\n        <div class=\"tags mt-4\">\n            <span class=\"badge\">#Nginx</span>\n            <span class=\"badge\">#Server</span>\n            <span class=\"badge\">#Timeout</span>\n            <span class=\"badge\">#PHP-FPM</span>\n        </div>\n    </div>\n</article>", "url": "posts/how-to-fix-504-gateway-timeout-using-nginx.html", "tags": "nginx, server, timeout, php-fpm"}, {"title": "Increase Speed Mouse Tracking Magic Mouse 2", "description": "How to adjust tracking speed for Apple Magic Mouse 2 using terminal commands", "content": "<article class=\"blog-post\">\n    <h1>Increase Speed Mouse Tracking Magic Mouse 2</h1>\n    <div class=\"meta mb-4\">November 17, 2021</div>\n\n    <div class=\"content\">\n        <p>Check current mouse tracking speed value:</p>\n\n        <pre><code>defaults read -g com.apple.mouse.scaling</code></pre>\n\n        <p>Increase mouse tracking speed value:</p>\n\n        <pre><code>defaults write -g com.apple.mouse.scaling 5.0</code></pre>\n\n        <div class=\"tags mt-4\">\n            <span class=\"badge\">#Mac</span>\n            <span class=\"badge\">#Mouse</span>\n            <span class=\"badge\">#Terminal</span>\n            <span class=\"badge\">#Settings</span>\n        </div>\n    </div>\n</article>", "url": "posts/increase-speed-mouse-tracking-magic-mouse-2.html", "tags": "mac, mouse, terminal, settings"}, {"title": "Laravel Envoy Deployment Configuration", "description": "Complete example of Laravel Envoy configuration for automated deployment with staging and production environments", "content": "<article class=\"blog-post\">\n    <h1>Laravel Envoy Deployment Configuration</h1>\n    <div class=\"meta mb-4\">February 16, 2024</div>\n\n    <div class=\"content\">\n        <h2>Server Configuration</h2>\n        <pre><code lang=\"javascript\" theme=\"arta\">@setup\n$__container->servers([\n    'staging' => 'user@ip_address',\n    'production' => ['user@ip_address -p 8288'],\n]);\n@endsetup</code></pre>\n\n        <h2>Environment Setup</h2>\n        <pre><code>@setup\n$repository = 'git@gitlab.com:username/awesome_project_ever.git';\n$releases_dir = '/var/www/html/app/awesome_project_ever/releases';\n$app_dir = '/var/www/html/app/awesome_project_ever';\n$release = date('YmdHis');\n$new_release_dir = $releases_dir .'/'. $release;\n$branch = isset($branch) ? $branch : \"master\";\nif($server == \"staging\"){\n    $branch = \"staging\";\n}\n@endsetup</code></pre>\n\n        <h2>Deployment Story</h2>\n        <pre><code>@story('deploy',['on' => $server,'parallel' => true])\nclone_repository\nrun_composer\nupdate_symlinks\ndeployment_migrate\ndeployment_cache\nclean_old_releases\nset_permission_folder\nsay_finished\n@endstory</code></pre>\n\n        <h2>Task Definitions</h2>\n\n        <h3>Clone Repository</h3>\n        <pre><code>@task('clone_repository')\necho 'Cloning repository'\n[ -d {{ $releases_dir }} ] || mkdir {{ $releases_dir }}\ngit clone --depth 1 {{ $repository }} --branch={{ $branch }} {{ $new_release_dir }}\n@endtask</code></pre>\n\n        <h3>Run Composer</h3>\n        <pre><code>@task('run_composer')\necho \"Starting deployment ({{ $release }})\"\ncd {{ $new_release_dir }}\ncomposer install --prefer-dist --no-scripts -q -o\n@endtask</code></pre>\n\n        <h3>Update Symlinks</h3>\n        <pre><code>@task('update_symlinks')\necho \"Linking storage directory\"\ncp -R {{ $new_release_dir }}/storage {{ $app_dir }}\nrm -rf {{ $new_release_dir }}/storage\nln -nfs {{ $app_dir }}/storage {{ $new_release_dir }}/storage\n\ncp -R {{ $new_release_dir }}/public {{ $app_dir }}\nrm -rf {{ $new_release_dir }}/public/images\nln -nfs {{ $app_dir }}/public/images {{ $new_release_dir }}/public/images\n\necho 'Linking .env file'\nln -nfs {{ $app_dir }}/.env {{ $new_release_dir }}/.env\n\necho 'Linking current release'\nln -nfs {{ $new_release_dir }} {{ $app_dir }}/current\n@endtask</code></pre>\n\n        <h3>Database Migration</h3>\n        <pre><code>@task('deployment_migrate')\necho \"Migrating...\"\nphp {{ $new_release_dir }}/artisan migrate --force --no-interaction\n@endtask</code></pre>\n\n        <h3>Cache Management</h3>\n        <pre><code>@task('deployment_cache')\necho \"clearing cache...\"\nphp {{ $new_release_dir }}/artisan cache:clear --quiet\nphp {{ $new_release_dir }}/artisan config:clear\necho \"Cache cleared\"\n@endtask</code></pre>\n\n        <h3>Cleanup Old Releases</h3>\n        <pre><code>@task('clean_old_releases')\necho \"Cleaning old releases ...\"\nrm -rf `ls -dt {{ $app_dir }}/releases/* | tail -n +4`\n@endtask</code></pre>\n\n        <h3>Set Permissions</h3>\n        <pre><code>@task('set_permission_folder')\necho \"Set permission folder\"\ncd {{ $app_dir }}\nsudo chgrp -R www-data storage public\nsudo chmod -R ug+rwx storage public\n\ncd {{ $app_dir }}/current\nsudo chgrp -R www-data bootstrap/cache\nsudo chmod -R ug+rwx bootstrap/cache\n@endtask</code></pre>\n\n        <h3>Slack Notification</h3>\n        <pre><code>@finished\n@slack('https://hooks.slack.com/services/(Kode)', '#gitlab-activities', \"Deployed {$server}\")\n@endfinished</code></pre>\n\n        <h2>Prerequisites</h2>\n        <ul>\n            <li>Create .env file</li>\n            <li>Create folder storage</li>\n            <li>Create folder public/images</li>\n        </ul>\n\n        <h2>Usage</h2>\n        <p>For staging deployment:</p>\n        <pre><code>envoy run deploy --server=staging</code></pre>\n\n        <p>For production deployment:</p>\n        <pre><code>envoy run deploy --server=production</code></pre>\n\n        <p>Full Code</p>\n        <pre><code>\n\n            @setup\n$__container->servers([\n    'staging' => 'user@ip_address',\n    'production' => ['user@ip_address -p 8288'],\n]);\n@endsetup\n\n@setup\n    $repository = 'git@gitlab.com:username/awesome_project_ever.git';\n    $releases_dir = '/var/www/html/app/awesome_project_ever/releases';\n    $app_dir = '/var/www/html/app/awesome_project_ever';\n    $release = date('YmdHis');\n    $new_release_dir = $releases_dir .'/'. $release;\n    $branch = isset($branch) ? $branch : \"master\";\n    if($server == \"staging\"){\n        $branch = \"staging\";\n    }\n@endsetup\n\n@story('deploy',['on' => $server,'parallel' => true])\n    clone_repository\n    run_composer\n    update_symlinks\n    deployment_migrate\n    deployment_cache\n    clean_old_releases\n    set_permission_folder\n    say_finished\n@endstory\n\n@task('clone_repository')\n    echo 'Cloning repository'\n    [ -d {{ $releases_dir }} ] || mkdir {{ $releases_dir }}\n    git clone --depth 1 {{ $repository }} --branch={{ $branch }} {{ $new_release_dir }}\n@endtask\n\n@task('run_composer')\n    echo \"Starting deployment ({{ $release }})\"\n    cd {{ $new_release_dir }}\n    composer install --prefer-dist --no-scripts -q -o\n@endtask\n\n@task('update_symlinks')\n    echo \"Linking storage directory\"\n    cp -R {{ $new_release_dir }}/storage {{ $app_dir }}\n    rm -rf {{ $new_release_dir }}/storage\n    ln -nfs {{ $app_dir }}/storage {{ $new_release_dir }}/storage\n\n    cp -R {{ $new_release_dir }}/public {{ $app_dir }}\n    rm -rf {{ $new_release_dir }}/public/images\n    ln -nfs {{ $app_dir }}/public/images {{ $new_release_dir }}/public/images\n\n    echo 'Linking .env file'\n    ln -nfs {{ $app_dir }}/.env {{ $new_release_dir }}/.env\n\n    echo 'Linking current release'\n    ln -nfs {{ $new_release_dir }} {{ $app_dir }}/current\n@endtask\n\n@task('deployment_migrate')\n    echo \"Migrating...\"\n    php {{ $new_release_dir }}/artisan migrate --force --no-interaction\n@endtask\n\n@task('deployment_cache')\n    echo \"clearing cache...\"\n    php {{ $new_release_dir }}/artisan cache:clear --quiet\n    php {{ $new_release_dir }}/artisan config:clear\n    echo \"Cache cleared\"\n@endtask\n\n@task('clean_old_releases')\n  echo \"Cleaning old releases ...\"\n  rm -rf `ls -dt {{ $app_dir }}/releases/* | tail -n +4`\n@endtask\n\n@task('set_permission_folder')\n    echo \"Set permission folder\"\n    cd {{ $app_dir }}\n    sudo chgrp -R www-data storage public\n    sudo chmod -R ug+rwx storage public\n\n    cd {{ $app_dir }}/current\n    sudo chgrp -R www-data bootstrap/cache\n    sudo chmod -R ug+rwx bootstrap/cache\n@endtask\n\n\n@finished\n    @slack('https://hooks.slack.com/services/(Kode)', '#gitlab-activities', \"Deployed {$server}\")\n@endfinished\n\n@task('say_finished')\n    echo \"Finished...\"\n@endtask\n\n\n\n{{--\n\ncreate .env\ncreate folder storage\ncreate folder public/images\n\nHow to run : \nif staging\nenvoy run deploy --server=staging\n\nif production\nenvoy run deploy --server=production\n\n--}}\n        </code></pre>\n\n        <div class=\"tags mt-4\">\n            <span class=\"badge\">#Laravel</span>\n            <span class=\"badge\">#Envoy</span>\n            <span class=\"badge\">#Deployment</span>\n            <span class=\"badge\">#DevOps</span>\n            <span class=\"badge\">#Automation</span>\n        </div>\n    </div>\n</article>", "url": "posts/laravel-envoy-deployment-configuration.html", "tags": "laravel, envoy, deployment, devops, automation"}, {"title": "Database Tips: Email Unique Softdeletes", "description": "Solution for handling unique email constraints with soft deletes using partial index", "content": "<article class=\"blog-post\">\n    <h1>Database Tips: Email Unique untuk Softdeletes</h1>\n    <div class=\"meta mb-4\">October 30, 2021</div>\n\n    <div class=\"content\">\n        <p>Terkadang mau bikin column email yang unique, tapi bakal jadi masalah kalau kita menggunakan softdeletes fitur.</p>\n\n        <h2>Solusi</h2>\n        <p>Solusinya dengan menggunakan partial index berikut ini:</p>\n\n        <pre><code lang=\"sql\">ALTER TABLE users ADD COLUMN email_unique varchar(512) \n    GENERATED ALWAYS AS (\n        CONCAT(email, '#', IF(deleted_at IS NULL, '-', deleted_at))\n    ) VIRTUAL;\n\nCREATE UNIQUE INDEX email_unique ON users (email_unique);</code></pre>\n\n        <h2>Referensi</h2>\n        <ul>\n            <li><a href=\"https://www.itsolutionstuff.com/post/laravel-unique-validation-with-soft-delete-exampleexample.html\" target=\"_blank\">Laravel Unique Validation with Soft Delete Example</a></li>\n            <li><a href=\"https://twitter.com/tobias_petry/status/1454085321180819457/photo/1\" target=\"_blank\">Original Twitter Thread by Tobias Petry</a></li>\n        </ul>\n\n        <div class=\"tags mt-4\">\n            <span class=\"badge\">#Database</span>\n            <span class=\"badge\">#MySQL</span>\n            <span class=\"badge\">#Laravel</span>\n            <span class=\"badge\">#Tips</span>\n            <span class=\"badge\">#SoftDeletes</span>\n        </div>\n    </div>\n</article>", "url": "posts/database-tips-email-unique-softdeletes.html", "tags": "database, mysql, laravel, tips, softdeletes"}, {"title": "Intercept Traffic Android Apps", "description": "", "content": "<article class=\"blog-post\">\n    <h1>Intercept Traffic Android Apps with Memu, Http Toolkit, & ADB</h1>\n    <div class=\"meta mb-4\">October 17, 2024</div>\n\n    <div class=\"content\">\n        <p>Dalam pengembangan aplikasi, terkadang kita ingin debugging semua traffic network di aplikasi mobile. Kita dapat melihat semua itu dengan melakukan intercept pada traffic tersebut.</p>\n\n        <h2>Steps</h2>\n        <ol>\n            <li>Download <a href=\"https://www.memuplay.com/\" target=\"_blank\">Memu emulator Android</a></li>\n            <li>Download <a href=\"https://httptoolkit.tech/\" target=\"_blank\">HTTP Toolkit</a></li>\n            <li>Download aplikasi Android HTTP Toolkit di Memu</li>\n            <li>Download adb toolkit â€“ Download the Android SDK Platform Tools ZIP file for Windows</li>\n            <li>Buka Terminal</li>\n            <li>Masuk ke folder toolkit adb</li>\n            <li>Running program adb</li>\n            <li>Konek ke Memu dengan menjalankan perintah berikut:\n                <pre><code>./adb connect localhost:21503</code></pre>\n            </li>\n            <li>Jika berhasil, kembali ke HTTP Toolkit. Terhubunglah ke Memu dari HTTP Toolkit dengan menggunakan menu android device yang terhubung melalui ADB.</li>\n        </ol>\n\n        <h2>Referensi</h2>\n        <ul>\n            <li><a href=\"https://www.xda-developers.com/install-adb-windows-macos-linux/\" target=\"_blank\">XDA - Install ADB on Windows, macOS & Linux</a></li>\n            <li><a href=\"https://docs.genymotion.com/desktop/latest/03_Virtual_devices.html#managing-virtual-devices\" target=\"_blank\">Genymotion Docs - Managing Virtual Devices</a></li>\n            <li><a href=\"https://support.genymotion.com/hc/en-us/articles/360002738297-How-to-connect-to-a-Genymotion-Desktop-virtual-device-remotely-with-ADB-\" target=\"_blank\">Genymotion Support - Connect to Virtual Device with ADB</a></li>\n        </ul>\n    </div>\n</article>", "url": "posts/intercept-traffic-android-apps.html", "tags": "android"}, {"title": "Jalanin MongoDB di local menggunakan Docker", "description": "Cara mudah menjalankan MongoDB di local environment dengan Docker", "content": "<article class=\"blog-post\">\n    <h1>Jalanin MongoDB di local menggunakan Docker</h1>\n    <div class=\"meta mb-4\">January 20, 2022</div>\n\n    <div class=\"content\">\n        <h2>Menjalankan MongoDB Container</h2>\n        <p>Gunakan perintah Docker berikut untuk menjalankan MongoDB:</p>\n        <pre><code lang=\"bash\">docker run -d -p 27017-27019:27017-27019 --name mongodb mongo:latest</code></pre>\n\n        <h2>Penjelasan Command</h2>\n        <ul>\n            <li>-d: run container in detached mode</li>\n            <li>-p: port mapping (host:container)</li>\n            <li>--name: nama container</li>\n            <li>mongo:latest: image yang digunakan</li>\n        </ul>\n\n        <h2>MongoDB Client</h2>\n        <p>Untuk mengelola database MongoDB, anda bisa menggunakan MongoDB GUI client:</p>\n        <ul>\n            <li><a href=\"https://robomongo.org/\" target=\"_blank\">Robo 3T (Robomongo)</a></li>\n        </ul>\n\n        <h2>Default Connection</h2>\n        <ul>\n            <li>Host: localhost</li>\n            <li>Port: 27017</li>\n            <li>No authentication required (default)</li>\n        </ul>\n\n        <div class=\"tags mt-4\">\n            <span class=\"badge\">#MongoDB</span>\n            <span class=\"badge\">#Docker</span>\n            <span class=\"badge\">#Database</span>\n            <span class=\"badge\">#Development</span>\n        </div>\n    </div>\n</article>", "url": "posts/jalanin-mongodb-di-local-menggunakan-docker.html", "tags": "mongodb, docker, database, development"}, {"title": "Centralized Log Menggunakan ELK Stack", "description": "Complete guide to setup centralized logging using Elasticsearch, Logstash, and Kibana (ELK Stack)", "content": "<article class=\"blog-post\">\n    <h1>Centralized Log Menggunakan ELK Stack</h1>\n    <div class=\"meta mb-4\">November 27, 2021</div>\n\n    <div class=\"content\">\n        <h2>Initial Setup</h2>\n        <pre><code>sudo apt update\nsudo apt upgrade -y \nsudo apt install htop git nginx curl unzip zip exif -y\nsudo apt install libmcrypt-dev libjpeg-dev libpng-dev libjpeg-dev libfreetype6-dev libbz2-dev libzip-dev -y</code></pre>\n\n        <h2>Installing Java</h2>\n        <pre><code>sudo apt-get install default-jre\njava -version</code></pre>\n\n        <h2>Setup Elasticsearch</h2>\n        <pre><code>curl -fsSL https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo apt-key add -\necho \"deb https://artifacts.elastic.co/packages/7.x/apt stable main\" | sudo tee -a /etc/apt/sources.list.d/elastic-7.x.list\nsudo apt update\nsudo apt install elasticsearch</code></pre>\n\n        <p>Edit Elasticsearch configuration:</p>\n        <pre><code>sudo vim /etc/elasticsearch/elasticsearch.yml</code></pre>\n\n        <p>Set network host to:</p>\n        <pre><code>network.host: localhost</code></pre>\n\n        <p>Start Elasticsearch:</p>\n        <pre><code>sudo systemctl start elasticsearch\nsudo systemctl enable elasticsearch</code></pre>\n\n        <h2>Verify Elasticsearch</h2>\n        <pre><code>sudo lsof -i -P -n | grep LISTEN | grep 9200\ncurl -XGET 'http://localhost:9200/_all/_search?q=*&pretty'\ncurl -X GET \"localhost:9200\"</code></pre>\n\n        <h2>Install Kibana</h2>\n        <pre><code>sudo apt install kibana\nsudo systemctl enable kibana\nsudo systemctl start kibana</code></pre>\n\n        <p>Verify Kibana:</p>\n        <pre><code>sudo lsof -i -P -n | grep LISTEN | grep 5601</code></pre>\n\n        <h2>Configure Nginx</h2>\n        <pre><code>sudo vim /etc/nginx/sites-available/logs.skul.id</code></pre>\n\n        <p>Add configuration:</p>\n        <pre><code>server {\n    listen 80;\n    server_name your_domain;\n    auth_basic \"Restricted Access\";\n    auth_basic_user_file /etc/nginx/htpasswd.users;\n\n    location / {\n        proxy_pass http://localhost:5601;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host $host;\n        proxy_cache_bypass $http_upgrade;\n    }\n}</code></pre>\n\n        <p>Enable site configuration:</p>\n        <pre><code>sudo ln -s /etc/nginx/sites-available/your_domain /etc/nginx/sites-enabled/your_domain\nsudo nginx -t\nsudo systemctl reload nginx</code></pre>\n\n        <h2>Install Logstash</h2>\n        <pre><code>sudo apt install logstash\nsudo systemctl start logstash\nsudo systemctl enable logstash</code></pre>\n\n        <h2>Install Filebeat</h2>\n        <pre><code>sudo apt install filebeat\nsudo vim /etc/filebeat/filebeat.yml</code></pre>\n\n        <p>References:</p>\n        <ul>\n            <li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-elasticsearch-logstash-and-kibana-elastic-stack-on-ubuntu-20-04\">DigitalOcean - Install ELK Stack on Ubuntu 20.04</a></li>\n            <li><a href=\"https://serverfault.com/questions/730622/how-to-format-log-data-before-forwarding-them-as-json-to-elasticsearch\">Format Log Data as JSON for Elasticsearch</a></li>\n            <li><a href=\"https://flareapp.io/blog/30-how-we-use-elasticsearch-kibana-and-filebeat-to-handle-our-logs\">How to Use ELK Stack for Log Handling</a></li>\n            <li><a href=\"https://devconnected.com/monitoring-linux-logs-with-kibana-and-rsyslog\">Monitoring Linux Logs with Kibana and Rsyslog</a></li>\n            <li><a href=\"https://www.youtube.com/watch?v=dtLBKIBxvTM\">Youtube</a></li>\n        </ul>\n\n        <div class=\"tags mt-4\">\n            <span class=\"badge\">#ELK</span>\n            <span class=\"badge\">#Elasticsearch</span>\n            <span class=\"badge\">#Logstash</span>\n            <span class=\"badge\">#Kibana</span>\n        </div>\n    </div>\n</article>", "url": "posts/centralized-log-menggunakan-elk-stack.html", "tags": "elk, elasticsearch, logstash, kibana"}, {"title": "Migrasi Folder Antar Komputer", "description": "Tools for transferring folders between computers using AirDrop and Syncthing", "content": "<article class=\"blog-post\">\n    <h1>Migrasi Folder Antar Komputer</h1>\n    <div class=\"meta mb-4\">November 18, 2021</div>\n\n    <div class=\"content\">\n        <p>Tools for transferring folders between computers:</p>\n\n        <ul>\n            <li>AirDrop - Built-in file sharing for Apple devices</li>\n            <li><a href=\"https://syncthing.net/\">Syncthing</a> - Open source continuous file synchronization</li>\n        </ul>\n\n        <div class=\"tags mt-4\">\n            <span class=\"badge\">#Transfer</span>\n            <span class=\"badge\">#AirDrop</span>\n            <span class=\"badge\">#Syncthing</span>\n            <span class=\"badge\">#FileSharing</span>\n        </div>\n    </div>\n</article>", "url": "posts/migrasi-folder-antar-komputer.html", "tags": "transfer, airdrop, syncthing, file-sharing"}, {"title": "Using Blade Formatter", "description": "Learn how to maintain consistent code style in Laravel Blade templates using blade-formatter", "content": "<article class=\"blog-post\">\n    <h1>Using Blade Formatter to Automatically Format All Blade Files</h1>\n    <div class=\"meta mb-4\">October 30, 2021</div>\n\n    <div class=\"content\">\n        <p>Blade-formatter adalah alat yang digunakan untuk memformat template Blade, templating yang digunakan dalam framework PHP Laravel. Ini dirancang untuk membantu supaya para developer menjaga gaya yang konsisten di template Blade mereka.</p>\n\n        <p>Untuk menggunakan blade-formatter, Anda harus menginstallnya melalui composer, package manager untuk PHP. Setelah terinstall, Anda dapat menjalankannya dari command line dengan menentukan path ke template Blade Anda.</p>\n\n        <p>Secara keseluruhan, blade-formatter adalah alat yang berharga bagi setiap developer yang bekerja dengan template Blade. Ini membantu untuk memastikan bahwa template Anda terformat dengan baik dan bebas dari kesalahan sintaksis, menghemat waktu dan usaha dalam jangka panjang.</p>\n\n        <h2>Resources</h2>\n        <p>Check the package: <a href=\"https://github.com/shufo/blade-formatter?utm=github\" target=\"_blank\">blade-formatter on GitHub</a></p>\n\n        <div class=\"tags mt-4\">\n            <span class=\"badge\">#Laravel</span>\n            <span class=\"badge\">#Blade</span>\n            <span class=\"badge\">#PHP</span>\n            <span class=\"badge\">#Tools</span>\n            <span class=\"badge\">#Formatting</span>\n        </div>\n    </div>\n</article>", "url": "posts/using-blade-formatter.html", "tags": "laravel, blade, formatting, tools, php"}, {"title": "Polymorph Type Int", "description": "Learn why and how to use integer types for polymorphic relationships in Laravel for better database performance", "content": "<article class=\"blog-post\">\n    <h1>Polymorph Type Using Int in Laravel</h1>\n    <div class=\"meta mb-4\">November 4, 2021</div>\n\n    \n    <div class=\"content\">\n        <img src=\"../../assets/images/FDR-ODWXMA0MA5L.jpeg\" alt=\"\">\n        <p>When using polymorphic relationships in Laravel, the type column is typically stored as a string.</p>\n\n        <p>However, using string types for indexing can reduce database performance significantly.</p>\n\n        <p>As shown in this <a href=\"https://x.com/aarondfrancis/status/1455927554607570953\" target=\"_blank\">Twitter thread</a>, using integers instead of strings for polymorphic types can improve query performance.</p>\n\n        <p>To implement this, you can map your models to integers in your migrations:</p>\n\n        <pre><code>public function up()\n{\n    Schema::create('taggables', function (Blueprint $table) {\n        $table->id();\n        $table->unsignedBigInteger('taggable_id');\n        $table->unsignedTinyInteger('taggable_type'); // Using int instead of string\n        $table->timestamps();\n    });\n}</code></pre>\n\n        <p>And in your model, you can define the mapping:</p>\n\n        <pre><code>protected function getMorphClass()\n{\n    return array_search(static::class, [\n        1 => Post::class,\n        2 => Video::class,\n        3 => Photo::class\n    ]);\n}</code></pre>\n\n        <div class=\"tags mt-4\">\n            <span class=\"badge\">#Laravel</span>\n            <span class=\"badge\">#Database</span>\n            <span class=\"badge\">#Performance</span>\n            <span class=\"badge\">#Polymorphic</span>\n        </div>\n    </div>\n</article>", "url": "posts/polymorph-type-int.html", "tags": "laravel, database, performance, polymorphic"}, {"title": "PHP Versioning di Macbook", "description": "Guide to manage multiple PHP versions on MacOS using ASDF and PHPBrew", "content": "<article class=\"blog-post\">\n    <h1>PHP Versioning di Macbook</h1>\n    <div class=\"meta mb-4\">November 17, 2021</div>\n\n    <div class=\"content\">\n        <p>There are two main tools to manage PHP versions on MacOS:</p>\n\n        <h2>1. ASDF Version Manager</h2>\n        <p>ASDF allows managing multiple language versions including PHP. Follow the installation guide at:</p>\n        <ul>\n            <li><a href=\"https://timnash.co.uk/installing-php-and-other-languages-with-asdf-on-macos-catalina/\">Installing PHP with ASDF on MacOS Catalina</a></li>\n        </ul>\n\n        <h2>2. PHPBrew</h2>\n        <p>PHPBrew is specifically designed for PHP version management. Installation guide available at:</p>\n        <ul>\n            <li><a href=\"https://phpbrew.github.io/phpbrew/\">PHPBrew Official Documentation</a></li>\n        </ul>\n\n        <h2>Apache Configuration</h2>\n        <p>For Apache setup with multiple PHP versions, refer to:</p>\n        <ul>\n            <li><a href=\"https://getgrav.org/blog/macos-monterey-apache-multiple-php-versions\">MacOS Monterey Apache Multiple PHP Versions Setup</a></li>\n        </ul>\n\n        <div class=\"tags mt-4\">\n            <span class=\"badge\">#PHP</span>\n            <span class=\"badge\">#Mac</span>\n            <span class=\"badge\">#ASDF</span>\n            <span class=\"badge\">#PHPBrew</span>\n        </div>\n    </div>\n</article>", "url": "posts/php-versioning-di-macbook.html", "tags": "php, mac, asdf, phpbrew"}, {"title": "Checking Aplikasi Mana yang Sedang Menggunakan Port", "description": "How to check which applications are using specific ports on your system", "content": "<article class=\"blog-post\">\n    <h1>Checking Aplikasi Mana yang Sedang Menggunakan Port</h1>\n    <div class=\"meta mb-4\">November 27, 2021</div>\n\n    <div class=\"content\">\n        <p>To check which application is using port 9200 (or any other port):</p>\n\n        <pre><code>sudo lsof -i -P -n | grep LISTEN | grep 9200</code></pre>\n\n        <div class=\"tags mt-4\">\n            <span class=\"badge\">#Terminal</span>\n            <span class=\"badge\">#Ports</span>\n            <span class=\"badge\">#Networking</span>\n            <span class=\"badge\">#Linux</span>\n        </div>\n    </div>\n</article>", "url": "posts/checking-aplikasi-mana-yang-sedang-menggunakan-port.html", "tags": "terminal, ports, networking, linux"}, {"title": "Export MYSQL RDS", "description": "Guide for exporting MySQL databases using mysqldump including RDS AWS backups", "content": "<article class=\"blog-post\">\n    <h1>Export MYSQL / RDS</h1>\n    <div class=\"meta mb-4\">November 27, 2021</div>\n\n    <div class=\"content\">\n        <h2>Backup RDS MySQL AWS</h2>\n        <pre><code>mysqldump -h xxxxxxx.ap-southeast-3.rds.amazonaws.com -u adminxxxx --password=passwordxxx databasexxx --set-gtid-purged=OFF > /home/ubuntu/waikiki/backup_database_26jan2024.sql</code></pre>\n\n        <h2>Single Database Backup</h2>\n        <pre><code>mysqldump -u root -ppassword wpdb > wpdb_backup.sql</code></pre>\n\n        <h2>Multiple Database Backup</h2>\n        <pre><code>mysqldump -u root -ppassword --databases wpdb1 wpdb2 wpdb3 > wpdb_backup3.sql</code></pre>\n\n        <h2>All Database Backup</h2>\n        <pre><code>mysqldump -u root -ppassword --all-databases > alldb_backup.sql</code></pre>\n\n        <h2>Table Structure Only Backup</h2>\n        <pre><code>mysqldump -u root -ppassword --no-data wpdb > wpdb_backup.sql</code></pre>\n\n        <h2>Specific Table Backup</h2>\n        <pre><code>mysqldump -u root -ppassword --no-data wpdb wptable > wpdbtable_backup.sql</code></pre>\n\n        <p>Reference:</p>\n        <ul>\n            <li><a href=\"https://snapshooter.com/learn/mysqldump-ultimate-guide\">MySQL Dump Ultimate Guide</a></li>\n        </ul>\n\n        <div class=\"tags mt-4\">\n            <span class=\"badge\">#MySQL</span>\n            <span class=\"badge\">#RDS</span>\n            <span class=\"badge\">#AWS</span>\n            <span class=\"badge\">#Backup</span>\n        </div>\n    </div>\n</article>", "url": "posts/export-mysql-rds.html", "tags": "mysql, rds, aws, backup"}, {"title": "Implementing an LRU Cache with Redis", "description": "How to implement Least Recently Used (LRU) caching policy with Redis", "content": "<article class=\"blog-post\">\n    <h1>Implementing an LRU Cache with Redis</h1>\n    <div class=\"meta mb-4\">February 18, 2022</div>\n\n    <div class=\"content\">\n        <h2>Caching Policy</h2>\n        <p>When using Redis to cache database query results, we need an efficient memory management strategy. Simply storing results indefinitely can lead to excessive RAM usage over time.</p>\n\n        <h2>LRU (Least Recently Used) Solution</h2>\n        <p>LRU caching policy provides an optimal solution by removing the least recently accessed items when memory limits are reached.</p>\n\n        <h2>Redis LRU Implementation</h2>\n        <p>Redis includes built-in LRU functionality. To enable it, configure Redis with two key parameters:</p>\n\n        <pre><code lang=\"bash\">redis-server --maxmemory 10mb --maxmemory-policy allkeys-lru</code></pre>\n\n        <h2>Configuration Parameters</h2>\n        <ul>\n            <li><strong>maxmemory</strong>: Sets memory limit (e.g., 10MB)</li>\n            <li><strong>maxmemory-policy</strong>: Defines eviction policy (allkeys-lru)</li>\n        </ul>\n\n        <h2>Available Memory Policies</h2>\n        <ul>\n            <li><strong>allkeys-lru</strong>: Evict any key using LRU</li>\n            <li><strong>volatile-lru</strong>: Evict keys with expiry using LRU</li>\n            <li><strong>allkeys-random</strong>: Evict random keys</li>\n            <li><strong>volatile-random</strong>: Evict random keys with expiry</li>\n            <li><strong>volatile-ttl</strong>: Evict keys with shortest TTL first</li>\n        </ul>\n\n        <h2>Benefits</h2>\n        <ul>\n            <li>Automatic memory management</li>\n            <li>Improved cache efficiency</li>\n            <li>Better resource utilization</li>\n            <li>No manual cache cleanup required</li>\n        </ul>\n\n        <div class=\"tags mt-4\">\n            <span class=\"badge\">#Redis</span>\n            <span class=\"badge\">#Cache</span>\n            <span class=\"badge\">#LRU</span>\n            <span class=\"badge\">#Database</span>\n            <span class=\"badge\">#Performance</span>\n        </div>\n    </div>\n</article>", "url": "posts/implementing-an-lru-cache-with-redis.html", "tags": "redis, cache, lru, database, performance"}, {"title": "Docker Handbook", "description": "Essential Docker guide and resources for containerizing applications", "content": "<article class=\"blog-post\">\n    <h1>Docker Handbook</h1>\n    <div class=\"meta mb-4\">November 21, 2021</div>\n\n    <div class=\"content\">\n        <p>Comprehensive guide for learning Docker and containerizing applications:</p>\n\n        <p>Reference:</p>\n        <ul>\n            <li><a href=\"https://www.freecodecamp.org/news/the-docker-handbook/#how-to-containerize-a-javascript-application\">The Docker Handbook - FreeCodeCamp</a></li>\n        </ul>\n\n        <div class=\"tags mt-4\">\n            <span class=\"badge\">#Docker</span>\n            <span class=\"badge\">#Containers</span>\n            <span class=\"badge\">#DevOps</span>\n            <span class=\"badge\">#JavaScript</span>\n        </div>\n    </div>\n</article>", "url": "posts/docker-handbook.html", "tags": "docker, containers, devops, javascript"}, {"title": "Belajar Golang", "description": "Collection of learning resources for Go programming language", "content": "<article class=\"blog-post\">\n    <h1>Belajar Golang</h1>\n    <div class=\"meta mb-4\">December 4, 2021</div>\n\n    <div class=\"content\">\n        <h2>Sumber Belajar</h2>\n        <ul>\n            <li><a href=\"https://www.sololearn.com/learning/1164\">SoloLearn</a></li>\n            <li><a href=\"https://dasarpemrogramangolang.novalagung.com/A-hash-sha1.html\">Noval Agung Blog</a></li>\n            <li><a href=\"https://www.youtube.com/watch?v=GjI0GSvmcSU\">Agung Setiawan Channel</a></li>\n        </ul>\n\n        <div class=\"tags mt-4\">\n            <span class=\"badge\">#Golang</span>\n            <span class=\"badge\">#Programming</span>\n            <span class=\"badge\">#Learning</span>\n            <span class=\"badge\">#Tutorial</span>\n        </div>\n    </div>\n</article>", "url": "posts/belajar-golang.html", "tags": "golang, programming, learning, tutorial"}, {"title": "Install AdonisJS NodeJS Framework", "description": "Step by step guide to install and run AdonisJS - A Laravel-style NodeJS framework", "content": "<article class=\"blog-post\">\n    <h1>Install AdonisJS NodeJS Framework</h1>\n    <div class=\"meta mb-4\">November 17, 2021</div>\n\n    <div class=\"content\">\n        <img src=\"https://miro.medium.com/max/1650/1*CvCRYWZTkhyqJIspP8ai_g.png\" alt=\"AdonisJS Logo\" class=\"img-fluid mb-4\">\n\n        <p>AdonisJS is a new NodeJS framework that feels very similar to Laravel. Here's how to get started:</p>\n\n        <h2>Install AdonisJS CLI</h2>\n        <p>First, install the AdonisJS CLI globally using npm:</p>\n        <pre><code>npm i -g @adonisjs/cli</code></pre>\n\n        <h2>Create New Application</h2>\n        <p>Create a new AdonisJS application:</p>\n        <pre><code>adonis new name_application</code></pre>\n\n        <img src=\"https://miro.medium.com/max/700/1*dYlnRxmVCbPrUvfBQeTiMg.png\" alt=\"Creating new AdonisJS application\" class=\"img-fluid mb-4\">\n\n        <h2>Run The Application</h2>\n        <p>Navigate to project directory and start the development server:</p>\n        <pre><code>cd name_application\nadonis serve --dev</code></pre>\n\n        <p>Access your application at:</p>\n        <pre><code>http://localhost:3333</code></pre>\n\n        <img src=\"https://miro.medium.com/max/700/1*WDuMEbWld12Mz154myrSwg.png\" alt=\"AdonisJS welcome page\" class=\"img-fluid mb-4\">\n\n        <h2>Project Structure</h2>\n        <p>The folder structure is very similar to Laravel:</p>\n        <img src=\"https://miro.medium.com/max/700/1*RIJEp6PO3tM9If4RDFHv9A.png\" alt=\"AdonisJS folder structure\" class=\"img-fluid mb-4\">\n\n        <div class=\"tags mt-4\">\n            <span class=\"badge\">#NodeJS</span>\n            <span class=\"badge\">#AdonisJS</span>\n            <span class=\"badge\">#Framework</span>\n            <span class=\"badge\">#JavaScript</span>\n        </div>\n    </div>\n</article>", "url": "posts/install-adonisjs-nodejs-framework.html", "tags": "nodejs, adonisjs, framework, javascript"}, {"title": "Belajar Command Line Arguments Golang", "description": "Memahami penggunaan command line arguments di Golang menggunakan package os.Args", "content": "<article class=\"blog-post\">\n    <h1>Belajar Command Line Arguments Golang</h1>\n    <div class=\"meta mb-4\">April 11, 2022</div>\n\n    <div class=\"content\">\n        <p>Golang punya package called as Args. Args adalah string berbentuk array berisi command line arguments.</p>\n\n        <h2>Examples</h2>\n\n        <h3>The First Argument</h3>\n        <p>Program name selalu menjadi argument pertama:</p>\n\n        <pre><code lang=\"go\">package main\n\nimport (\n    \"fmt\"\n    \"os\"\n)\n\nfunc main() {\n    // The first argument is always program name\n    myProgramName := os.Args[0]\n    \n    // it will display the program name\n    fmt.Println(myProgramName)\n}</code></pre>\n\n        <p>Output:</p>\n        <img src=\"../../assets/images/Screen-Shot-2022-04-11-at-08.40.35.png\" alt=\"First Argument Output\" class=\"img-fluid mb-4\" />\n\n        <h3>Get All Arguments</h3>\n        <p>Mengambil semua arguments kecuali program name:</p>\n\n        <pre><code lang=\"go\">package main\n\nimport (\n    \"fmt\"\n    \"os\"\n)\n\nfunc main() {\n    allArgs := os.Args[1:]\n    fmt.Println(allArgs)\n}</code></pre>\n\n        <p>Output:</p>\n        <img src=\"../../assets/images/Screen-Shot-2022-04-11-at-08.41.24.png\" alt=\"All Arguments Output\" class=\"img-fluid mb-4\" />\n\n        <h2>Key Points</h2>\n        <ul>\n            <li>os.Args[0] berisi nama program</li>\n            <li>os.Args[1:] berisi semua arguments yang diberikan</li>\n            <li>Arguments dipisahkan dengan spasi</li>\n        </ul>\n\n        <div class=\"tags mt-4\">\n            <span class=\"badge\">#Golang</span>\n            <span class=\"badge\">#CLI</span>\n            <span class=\"badge\">#Programming</span>\n            <span class=\"badge\">#Tutorial</span>\n        </div>\n    </div>\n</article>", "url": "posts/belajar-command-line-arguments-golang.html", "tags": "golang, cli, programming, tutorial"}, {"title": "Docker Compose for RabbitMQ: Basic Setup", "description": "Learn how to set up RabbitMQ locally using Docker Compose with persistent storage, management UI, and secure defaults", "content": "<article class=\"blog-post\">\n    <h1>Docker Compose for RabbitMQ: Basic Setup</h1>\n    <div class=\"meta mb-4\">16/02/2024</div>\n    \n    <div class=\"content\">\n        <p>Setting up RabbitMQ locally for development can be streamlined using Docker Compose. Here's a practical guide to get you started.</p>\n\n        <h2>Basic Setup</h2>\n        <p>Create a new file named <code>docker-compose.yml</code> with this configuration:</p>\n\n        <pre><code data-lang=\"sh\">version: '3.8'\nservices:\n  rabbitmq:\n    image: rabbitmq:3.12-management\n    ports:\n      - \"5672:5672\"   # AMQP protocol port\n      - \"15672:15672\" # Management UI port\n    environment:\n      - RABBITMQ_DEFAULT_USER=admin\n      - RABBITMQ_DEFAULT_PASS=admin123\n    volumes:\n      - rabbitmq_data:/var/lib/rabbitmq\n\nvolumes:\n  rabbitmq_data:</code></pre>\n\n        <h2>Running the Container</h2>\n        <p>Start RabbitMQ using:</p>\n        <pre><code>docker-compose up -d</code></pre>\n\n        <h2>Accessing Management UI</h2>\n        <ol>\n            <li>Open <code>http://localhost:15672</code></li>\n            <li>Login with:\n                <ul>\n                    <li>Username: admin</li>\n                    <li>Password: admin123</li>\n                </ul>\n            </li>\n        </ol>\n\n        <h2>Key Features</h2>\n        <ul>\n            <li>Persistent storage using named volume</li>\n            <li>Management UI enabled</li>\n            <li>Custom default credentials</li>\n            <li>Standard AMQP port mapping</li>\n        </ul>\n\n        <div class=\"tags mt-4\">\n            <span class=\"badge bg-light text-dark\">#Docker</span>\n            <span class=\"badge bg-light text-dark\">#RabbitMQ</span>\n            <span class=\"badge bg-light text-dark\">#DevOps</span>\n        </div>\n    </div>\n</article>", "url": "posts/docker-compose-for-rabbitmq-basic-setup.html", "tags": "docker, rabbitmq, devops, message-queue"}, {"title": "Users Linux", "description": "Managing Linux users and groups - commands and best practices", "content": "<article class=\"blog-post\">\n    <h1>Users Linux</h1>\n    <div class=\"meta mb-4\">December 11, 2021</div>\n\n    <div class=\"content\">\n        <h2>List Users in Linux</h2>\n        <p>To list all users on a Linux system, use the following command:</p>\n        <pre><code lang=\"bash\">compgen -u</code></pre>\n\n        <h2>Managing User Groups</h2>\n        \n        <h3>Add User to Group</h3>\n        <p>To add an existing user to a secondary group, use the usermod command with -a -G options:</p>\n        <pre><code lang=\"bash\">sudo usermod -a -G groupname username</code></pre>\n\n        <h3>Example: Adding User to Sudo Group</h3>\n        <pre><code lang=\"bash\">sudo usermod -a -G sudo linuxize</code></pre>\n\n        <h2>Important Notes</h2>\n        <ul>\n            <li>Always use the -a flag with -G to append groups</li>\n            <li>Without -a flag, user will be removed from unlisted groups</li>\n            <li>Command runs silently on success</li>\n            <li>Warnings appear only for non-existent users/groups</li>\n        </ul>\n\n        <h2>Additional User Management Commands</h2>\n        <ul>\n            <li>useradd - Create new user</li>\n            <li>userdel - Delete user</li>\n            <li>groups - List user's groups</li>\n            <li>id - Show user and group IDs</li>\n        </ul>\n\n        <div class=\"tags mt-4\">\n            <span class=\"badge\">#Linux</span>\n            <span class=\"badge\">#Users</span>\n            <span class=\"badge\">#System</span>\n            <span class=\"badge\">#Administration</span>\n        </div>\n    </div>\n</article>", "url": "posts/users-linux.html", "tags": "linux, users, system, administration"}, {"title": "Mengenal Chunk dan Cursor pada Laravel", "description": "Understanding Laravel's chunk and cursor methods for handling large datasets efficiently", "content": "<article class=\"blog-post\">\n    <h1>Mengenal Chunk dan Cursor pada Laravel â€“ Penting untuk performance</h1>\n    <div class=\"meta mb-4\">November 24, 2021</div>\n\n    <div class=\"content\">\n        <p>Function chunk dan cursor digunakan untuk mengambil data dalam jumlah besar dengan memperhatikan penggunaan memory.</p>\n\n        <h2>Performance Comparison</h2>\n\n        <h3>10,000 records:</h3>\n        <pre><code>+-------------+-----------+------------+\n|             | Time(sec) | Memory(MB) |\n+-------------+-----------+------------+\n| get()       |      0.17 |         22 |\n| chunk(100)  |      0.38 |         10 |\n| chunk(1000) |      0.17 |         12 |\n| cursor()    |      0.16 |         14 |\n+-------------+-----------+------------+</code></pre>\n\n        <h3>100,000 records:</h3>\n        <pre><code>+--------------+------------+------------+\n|              | Time(sec)  | Memory(MB) |\n+--------------+------------+------------+\n| get()        |        0.8 |     132    |\n| chunk(100)   |       19.9 |      10    |\n| chunk(1000)  |        2.3 |      12    |\n| chunk(10000) |        1.1 |      34    |\n| cursor()     |        0.5 |      45    |\n+--------------+------------+------------+</code></pre>\n\n        <h2>Key Differences</h2>\n        <ul>\n            <li><strong>cursor():</strong> Optimized for speed</li>\n            <li><strong>chunk():</strong> Optimized for consistent memory usage</li>\n        </ul>\n\n        <h2>When to Use What</h2>\n        <p>Use <code>cursor()</code> when speed is the priority and <code>chunk()</code> when you need to maintain consistent memory usage below a certain threshold.</p>\n\n        <h2>Test Environment</h2>\n        <ul>\n            <li>Homestead 0.5.0</li>\n            <li>PHP 7.0.12</li>\n            <li>MySQL 5.7.16</li>\n            <li>Laravel 5.3.22</li>\n        </ul>\n\n        <p>References:</p>\n        <ul>\n            <li><a href=\"https://stackoverflow.com/questions/45464676/what-is-the-difference-between-laravel-cursor-and-laravel-chunk-method\">Stack Overflow - Difference between Laravel cursor and chunk method</a></li>\n            <li><a href=\"https://qiita-com.translate.goog/ryo511/items/ebcd1c1b2ad5addc5c9d?_x_tr_sl=auto&_x_tr_tl=en&_x_tr_hl=en&_x_tr_pto=nui\">Performance comparison of Laravel chunk and cursor</a></li>\n        </ul>\n\n        <div class=\"tags mt-4\">\n            <span class=\"badge\">#Laravel</span>\n            <span class=\"badge\">#Performance</span>\n            <span class=\"badge\">#Database</span>\n            <span class=\"badge\">#Optimization</span>\n        </div>\n    </div>\n</article>", "url": "posts/mengenal-chunk-dan-cursor-pada-laravel.html", "tags": "laravel, performance, database, optimization"}]